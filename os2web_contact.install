<?php

/**
 * @file
 * Install, uninstall and update hooks for os2web_contact module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Symfony\Component\Yaml\Yaml;
use Drupal\field\Entity\FieldConfig;
use Drupal\Component\Utility\NestedArray;

/**
 * Reads in new configuration.
 *
 * @param string $config_name
 *   Configuration name.
 */
function os2web_contact_read_in_new_config($config_name) {
  $path = drupal_get_path('module', 'os2web_contact');
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');
  $active_storage->write($config_name, Yaml::parse(file_get_contents($path . '/config/optional/' . $config_name . '.yml')));
}

/**
 * Update entity from yml.
 *
 * Some config like form display needs to be updated via config manager.
 *
 * @param string $ymlFileName
 *   Yml file name.
 * @param string $entityType
 *   The entity type for this storage.
 * @param mixed $id
 *   The ID of the entity to load.
 * @param array $setComponents
 *   Array of components you want to add.
 *   - The key will be what we are setting.
 *   - The value is the key that will be used from the new config file
 *     (Can have in string for array).
 *
 * @throws
 */
function os2web_contact_update_entity_from_yml($ymlFileName, $entityType, $id, array $setComponents) {
  $yml = Yaml::parse(file_get_contents(drupal_get_path('module', 'os2web_contact') . '/config/optional/' . $ymlFileName . '.yml'));
  $entity = \Drupal::entityTypeManager()
    ->getStorage($entityType)
    ->load($id);
  foreach ($setComponents as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $entity->setComponent($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      if (empty($value)) {
        \Drupal::messenger()->addWarning('Component ' . $key . ' has empty configuration');
        continue;
      }
      $entity->setComponent($key, $value);
    }
  }

  $entity->save();
}


/**
 * Updates os2web_contact entity fields.
 */
function os2web_contact_update_8001() {
  // Remove outdated fields.
  $fields = [
    'field_os2web_contact_modal_text',
    'field_os2web_contact_text',
    'field_os2web_contact_heading',
    'field_os2web_contact_modal_head',
  ];
  foreach ($fields as $field_name) {
    $field = \Drupal::entityTypeManager()
      ->getStorage('field_config')
      ->load('os2web_contact.os2web_contact.' . $field_name);
    if (empty($field)) {
      \Drupal::messenger()->addWarning(t('Field :field not found', [':field' => $field_name]));
      continue;
    }
    $field->delete();
    field_purge_field($field);
  }

  // Add new fields.
  $fields = [
    'field_os2web_contact_modal_body',
    'field_os2web_contact_body',
    'field_os2web_contact_heading',
    'field_os2web_contact_modal_head',
  ];
  $path = drupal_get_path('module', 'os2web_contact');
  foreach ($fields as $field_name) {
    // Create field storage.
    $field_storage_yml = Yaml::parse(file_get_contents($path . '/config/optional/field.storage.os2web_contact.' . $field_name . '.yml'));
    if (!FieldStorageConfig::loadByName($field_storage_yml['entity_type'], $field_storage_yml['field_name'])) {
      FieldStorageConfig::create($field_storage_yml)->save();
    }
    // Create field instance.
    $field_yml = Yaml::parse(file_get_contents($path . '/config/optional/field.field.os2web_contact.os2web_contact.' . $field_name . '.yml'));
    if (!FieldConfig::loadByName($field_yml['entity_type'], $field_yml['bundle'], $field_yml['field_name'])) {
      FieldConfig::create($field_yml)->save();
    }
  }

  os2web_contact_update_entity_from_yml(
    'core.entity_form_display.os2web_contact.os2web_contact.default',
    'entity_form_display',
    'os2web_contact.os2web_contact.default', [
    'field_os2web_contact_modal_body' => 'content.field_os2web_contact_modal_body',
    'field_os2web_contact_body' => 'content.field_os2web_contact_body',
    'field_os2web_contact_heading' => 'content.field_os2web_contact_heading',
    'field_os2web_contact_modal_head' => 'content.field_os2web_contact_modal_head',
  ]);

  os2web_contact_update_entity_from_yml(
    'core.entity_view_display.os2web_contact.os2web_contact.default',
    'entity_view_display',
    'os2web_contact.os2web_contact.default', [
    'field_os2web_contact_modal_body' => 'content.field_os2web_contact_modal_body',
    'field_os2web_contact_body' => 'content.field_os2web_contact_body',
    'field_os2web_contact_heading' => 'content.field_os2web_contact_heading',
    'field_os2web_contact_modal_head' => 'content.field_os2web_contact_modal_head',
  ]);
}

/**
 * Renaming texts fields.
 */
function os2web_contact_update_8002() {
  os2web_contact_read_in_new_config('field.field.os2web_contact.os2web_contact.field_os2web_contact_body');
  os2web_contact_read_in_new_config('field.field.os2web_contact.os2web_contact.field_os2web_contact_more');
}

/**
 * Adding phone and email fields.
 */
function os2web_contact_update_8003() {
  $fields = [
    'field_os2web_contact_phone',
    'field_os2web_contact_email',
  ];
  $entity_type = 'os2web_contact';
  $entity_bundle = 'os2web_contact';
  $path = drupal_get_path('module', 'os2web_contact');

  foreach ($fields as $field_name) {
    // Create field storage.
    $field_storage_yml = Yaml::parse(file_get_contents($path . '/config/optional/field.storage.' . $entity_type . '.' . $field_name . '.yml'));
    if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
      FieldStorageConfig::create($field_storage_yml)->save();
    }
    // Create field instance.
    $field_instance_yml = Yaml::parse(file_get_contents($path . '/config/optional/field.field.' . $entity_type . '.' . $entity_bundle . '.' . $field_name . '.yml'));
    if (!FieldConfig::loadByName($entity_type, $entity_bundle, $field_name)) {
      FieldConfig::create($field_instance_yml)->save();
    }

    // Applying form/view_display settings based on config in yml files.
    $components = [
      $field_name => 'content.' . $field_name,
      'hidden' => 'hidden',
    ];
    $yaml_id = $entity_type . '.' . $entity_bundle . '.default';
    os2web_contact_update_entity_from_yml('core.entity_form_display.' . $yaml_id, 'entity_form_display', $yaml_id, $components);
    os2web_contact_update_entity_from_yml('core.entity_view_display.' . $yaml_id, 'entity_view_display', $yaml_id, $components);
  }
}

/**
 * Renaming $revision_metadata_keys to D9 defaults.
 */
function os2web_contact_update_8004() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  // Add the published entity key and revisionable metadata fields to the
  // os2web_contact entity type.
  $entity_type = $definition_update_manager->getEntityType('os2web_contact');
  $entity_type_id = $entity_type->id();

  $revision_log_message = BaseFieldDefinition::create('string_long')
    ->setLabel(t('Revision log message'))
    ->setDescription(t('Briefly describe the changes you have made.'))
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textarea',
      'weight' => 25,
      'settings' => [
        'rows' => 4,
      ],
    ]);

  $definition_update_manager->installFieldStorageDefinition('revision_log_message', $entity_type_id, $entity_type_id, $revision_log_message);

  $old_field_storage_definition = $definition_update_manager->getFieldStorageDefinition('revision_log', 'os2web_contact');
  if ($old_field_storage_definition instanceof FieldStorageDefinitionInterface) {
    $definition_update_manager->uninstallFieldStorageDefinition($old_field_storage_definition);
  }
}
